mod algorithm;

fn main() {
    // QR code
    // algorithm::qr_code::main();
    // algorithm::rock_scissors_paper::main();
    algorithm::roma_numeric::main();
    algorithm::prime_number::main();
    algorithm::reverse_int::main();
    algorithm::lcm_gcd::main();
    algorithm::n_sqrt::main();
    algorithm::wildcard_match::main();
    algorithm::median_array::main();
    algorithm::elevation_map::main();
    algorithm::get_permutation::main();
    algorithm::bubble_sort::main();
    algorithm::quick_sort::main();
    algorithm::merge_sort::main();
    algorithm::radix_convert::main();
    algorithm::fibonacci::main();
    algorithm::binary_search::main();
    algorithm::two_sum_search::main();
    algorithm::gaussian_calc::main();
    algorithm::collatz_problem::main();
    algorithm::pascal_triangle::main();
    algorithm::poisson_dispersion::main();
    algorithm::coin_change::main();
    algorithm::hanoi::main();
    algorithm::recursive::main();
    algorithm::dijkstra::main();
    algorithm::linked_list::main();
    algorithm::newton_method::main();
    algorithm::euler_totient::main();
    algorithm::rsa_cipher::main();
    algorithm::islands_count::main();
    algorithm::wait_queue::main();
    algorithm::generic_algorithm::main();
    algorithm::scramble_string::main();
    algorithm::decode_ways::main();
    algorithm::zigzag::main();
    algorithm::dice::main();
    algorithm::euclidean_algorithm::main();
    algorithm::monte_carlo::main();
    algorithm::container_with_most_water::main();
    algorithm::add_one_row_tree::main();
    algorithm::n_queen::main();
    algorithm::my_calender::main();
    algorithm::text_justification::main();
    algorithm::edit_distance::main();
    algorithm::valid_number::main();
    algorithm::basic_calculator::main();
    algorithm::candy_rating::main();
    algorithm::burst_balloon::main();
    algorithm::least_frequency_used::main();
    algorithm::smallest_good_base::main();
    algorithm::freedom_trail::main();
    algorithm::max_chunks_to_make_sorted::main();
    algorithm::number_of_valid_words_for_each_puzzle::main();
    algorithm::fancy_sequence::main();
    algorithm::largest_palindrome::main();
}
