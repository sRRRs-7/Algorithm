{"message":"the trait bound `Luma<u8>: Element` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/algorithm/qr_code.rs","byte_start":1032,"byte_end":1040,"line_start":40,"line_end":40,"column_start":33,"column_end":41,"is_primary":true,"text":[{"text":"        let image = qr.render::<Luma<u8>>().build();","highlight_start":33,"highlight_end":41}],"label":"the trait `Element` is not implemented for `Luma<u8>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `Element`:\n  &'a str\n  char","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Luma<u8>` to implement `qrcode::render::Pixel`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QrCode::render`","code":null,"level":"note","spans":[{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":"required by a bound in this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srrrs/.cargo/registry/src/github.com-1ecc6299db9ec823/qrcode-0.11.2/src/lib.rs","byte_start":8173,"byte_end":8178,"line_start":226,"line_end":226,"column_start":22,"column_end":27,"is_primary":true,"text":[{"text":"    pub fn render<P: Pixel>(&self) -> Renderer<P> {","highlight_start":22,"highlight_end":27}],"label":"required by this bound in `QrCode::render`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Luma<u8>: Element` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/algorithm/qr_code.rs:40:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let image = qr.render::<Luma<u8>>().build();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Element` is not implemented for `Luma<u8>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Element`:\u001b[0m\n\u001b[0m              &'a str\u001b[0m\n\u001b[0m              char\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Luma<u8>` to implement `qrcode::render::Pixel`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QrCode::render`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/srrrs/.cargo/registry/src/github.com-1ecc6299db9ec823/qrcode-0.11.2/src/lib.rs:226:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m226\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn render<P: Pixel>(&self) -> Renderer<P> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QrCode::render`\u001b[0m\n\n"}
{"message":"the method `build` exists for struct `Renderer<'_, Luma<u8>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/algorithm/qr_code.rs","byte_start":1044,"byte_end":1049,"line_start":40,"line_end":40,"column_start":45,"column_end":50,"is_primary":true,"text":[{"text":"        let image = qr.render::<Luma<u8>>().build();","highlight_start":45,"highlight_end":50}],"label":"method cannot be called on `Renderer<'_, Luma<u8>>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/srrrs/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.17.0/./src/color.rs","byte_start":1535,"byte_end":1595,"line_start":64,"line_end":64,"column_start":1,"column_end":61,"is_primary":false,"text":[{"text":"pub struct $ident<T: Primitive> { pub data: [T; $channels] }","highlight_start":1,"highlight_end":61}],"label":"doesn't satisfy `Luma<u8>: Element`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srrrs/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.17.0/./src/color.rs","byte_start":5340,"byte_end":5608,"line_start":208,"line_end":213,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_colors! {","highlight_start":1,"highlight_end":17},{"text":"    Rgb, 3, 0, \"RGB\", RGB, #[doc = \"RGB colors\"];","highlight_start":1,"highlight_end":50},{"text":"    Luma, 1, 0, \"Y\", Gray, #[doc = \"Grayscale colors\"];","highlight_start":1,"highlight_end":56},{"text":"    Rgba, 4, 1, \"RGBA\", RGBA, #[doc = \"RGB colors + alpha channel\"];","highlight_start":1,"highlight_end":69},{"text":"    LumaA, 2, 1, \"YA\", GrayA, #[doc = \"Grayscale colors + alpha channel\"];","highlight_start":1,"highlight_end":75},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_colors!","def_site_span":{"file_name":"/Users/srrrs/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.17.0/./src/color.rs","byte_start":1205,"byte_end":1231,"line_start":48,"line_end":48,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! define_colors {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/srrrs/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.17.0/./src/color.rs","byte_start":1535,"byte_end":1595,"line_start":64,"line_end":64,"column_start":1,"column_end":61,"is_primary":false,"text":[{"text":"pub struct $ident<T: Primitive> { pub data: [T; $channels] }","highlight_start":1,"highlight_end":61}],"label":"doesn't satisfy `Luma<u8>: qrcode::render::Pixel`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/srrrs/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.17.0/./src/color.rs","byte_start":5340,"byte_end":5608,"line_start":208,"line_end":213,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_colors! {","highlight_start":1,"highlight_end":17},{"text":"    Rgb, 3, 0, \"RGB\", RGB, #[doc = \"RGB colors\"];","highlight_start":1,"highlight_end":50},{"text":"    Luma, 1, 0, \"Y\", Gray, #[doc = \"Grayscale colors\"];","highlight_start":1,"highlight_end":56},{"text":"    Rgba, 4, 1, \"RGBA\", RGBA, #[doc = \"RGB colors + alpha channel\"];","highlight_start":1,"highlight_end":69},{"text":"    LumaA, 2, 1, \"YA\", GrayA, #[doc = \"Grayscale colors + alpha channel\"];","highlight_start":1,"highlight_end":75},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_colors!","def_site_span":{"file_name":"/Users/srrrs/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.17.0/./src/color.rs","byte_start":1205,"byte_end":1231,"line_start":48,"line_end":48,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! define_colors {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following trait bounds were not satisfied:\n`Luma<u8>: qrcode::render::Pixel`\n`Luma<u8>: Element`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `build` exists for struct `Renderer<'_, Luma<u8>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/algorithm/qr_code.rs:40:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let image = qr.render::<Luma<u8>>().build();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `Renderer<'_, Luma<u8>>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/srrrs/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.17.0/./src/color.rs:208:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m208\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_colors! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m209\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Rgb, 3, 0, \"RGB\", RGB, #[doc = \"RGB colors\"];\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Luma, 1, 0, \"Y\", Gray, #[doc = \"Grayscale colors\"];\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Rgba, 4, 1, \"RGBA\", RGBA, #[doc = \"RGB colors + alpha channel\"];\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m212\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    LumaA, 2, 1, \"YA\", GrayA, #[doc = \"Grayscale colors + alpha channel\"];\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m213\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `Luma<u8>: Element`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `Luma<u8>: qrcode::render::Pixel`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `Luma<u8>: qrcode::render::Pixel`\u001b[0m\n\u001b[0m            `Luma<u8>: Element`\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0277, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0599.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
